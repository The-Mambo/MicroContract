export interface ExportData {
  fileName: string;
  analysisResult: any;
  originalText: string;
  uploadedAt: Date;
}

export function generateAnalysisReport(data: ExportData): string {
  const { fileName, analysisResult, originalText, uploadedAt } = data;
  
  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getRiskLevel = (type: string) => {
    switch (type) {
      case 'high': return '🔴 HIGH RISK';
      case 'medium': return '🟡 MEDIUM RISK';
      case 'low': return '🟢 LOW RISK';
      default: return type.toUpperCase();
    }
  };

  let report = `
CONTRACT ANALYSIS REPORT
========================

Document: ${fileName}
Analysis Date: ${formatDate(uploadedAt)}
Overall Risk Score: ${analysisResult.overallScore}/100
Total Clauses Analyzed: ${analysisResult.totalClauses}

EXECUTIVE SUMMARY
================
${analysisResult.overallScore >= 80 ? 
  '✅ This contract appears to be relatively safe with minimal risks identified.' :
  analysisResult.overallScore >= 60 ?
  '⚠️ This contract has some areas of concern that should be addressed.' :
  '🚨 This contract contains significant risks that require immediate attention.'
}

Risk Breakdown:
- High Risk Issues: ${analysisResult.risks.filter((r: any) => r.type === 'high').length}
- Medium Risk Issues: ${analysisResult.risks.filter((r: any) => r.type === 'medium').length}
- Low Risk Issues: ${analysisResult.risks.filter((r: any) => r.type === 'low').length}

IDENTIFIED RISKS
===============
`;

  analysisResult.risks.forEach((risk: any, index: number) => {
    report += `
${index + 1}. ${getRiskLevel(risk.type)} - ${risk.category}
   Location: ${risk.location}
   
   Issue: ${risk.description}
   
   Why This Matters: ${risk.explanation}
   
   Recommended Action: ${risk.suggestion}
   
   ${risk.originalClause ? `Original Clause: "${risk.originalClause}"` : ''}
   ${risk.suggestedClause ? `Suggested Revision: "${risk.suggestedClause}"` : ''}
   
   ${'='.repeat(80)}
`;
  });

  if (analysisResult.revisedSections && analysisResult.revisedSections.length > 0) {
    report += `

SUGGESTED REVISIONS
==================
The following sections show specific improvements to problematic clauses:

`;

    analysisResult.revisedSections.forEach((section: any, index: number) => {
      report += `
${index + 1}. ${section.section}

ORIGINAL:
${section.original}

REVISED:
${section.revised.replace(/\*\*(.*?)\*\*/g, '$1')}

${'='.repeat(80)}
`;
    });
  }

  report += `

NEXT STEPS
==========
1. Review all HIGH RISK items immediately
2. Consider implementing suggested revisions
3. Consult with a legal professional for complex issues
4. Keep this report for your records

DISCLAIMER
==========
This analysis is provided by AI and should not be considered legal advice. 
Always consult with a qualified attorney for important legal matters.

Generated by ContractGuard - Your Mini Legal Co-Pilot
Report ID: CG-${Date.now()}
`;

  return report;
}

export function downloadTextFile(content: string, filename: string) {
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

export function generateRevisedContract(originalText: string, analysisResult: any): string {
  let revisedContract = originalText;
  
  // Apply revisions if available
  if (analysisResult.revisedSections) {
    analysisResult.revisedSections.forEach((section: any) => {
      // Simple text replacement - in a real app, this would be more sophisticated
      const cleanRevised = section.revised.replace(/\*\*(.*?)\*\*/g, '$1');
      revisedContract = revisedContract.replace(section.original, cleanRevised);
    });
  }
  
  const header = `
REVISED CONTRACT
===============
Original Document: ${analysisResult.fileName || 'Contract'}
Revision Date: ${new Date().toLocaleDateString()}
Revised by: ContractGuard AI Analysis

IMPORTANT: This is an AI-generated revision. Please review all changes 
carefully and consult with a legal professional before using.

${'='.repeat(80)}

`;
  
  return header + revisedContract;
}